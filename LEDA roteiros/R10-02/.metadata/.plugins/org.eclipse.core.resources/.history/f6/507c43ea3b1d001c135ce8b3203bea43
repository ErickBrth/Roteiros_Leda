package adt.avltree;

import adt.bst.BSTImpl;
import adt.bst.BSTNode;
import adt.bt.Util;

/**
 * 
 * Implementacao de uma arvore AVL
 * A CLASSE AVLTree herda de BSTImpl. VOCE PRECISA SOBRESCREVER A IMPLEMENTACAO
 * DE BSTIMPL RECEBIDA COM SUA IMPLEMENTACAO "OU ENTAO" IMPLEMENTAR OS SEGUITNES
 * METODOS QUE SERAO TESTADOS NA CLASSE AVLTREE:
 *  - insert
 *  - preOrder
 *  - postOrder
 *  - remove
 *  - height
 *  - size
 *
 * @author Claudio Campelo
 *
 * @param <T>
 */
public class AVLTreeImpl<T extends Comparable<T>> extends BSTImpl<T> implements
		AVLTree<T> {

	// TODO Do not forget: you must override the methods insert and remove
	// conveniently.
	
	@Override
	public void insert(T element) {
		this.insert(this.root, element);
	}

	protected void insert(BSTNode<T> node, T element) {

		if (node.isEmpty()) {

			node.setData(element);
			node.setLeft(new BSTNode<T>());
			node.setRight(new BSTNode<T>());
			node.getLeft().setParent(node);
			node.getRight().setParent(node);

			rebalanceUp(node);

		} else if (element.compareTo(node.getData()) > 0) {

			this.insert((BSTNode<T>) node.getRight(), element);

		} else if (element.compareTo(node.getData()) < 0) {

			this.insert((BSTNode<T>) node.getLeft(), element);

		}

	}

	@Override
	public void remove(T element) {

		BSTNode<T> node = super.search(element);
		super.remove(element);
		rebalanceUp(node);
	}
	
	
	
	// AUXILIARY
	protected int calculateBalance(BSTNode<T> node) {
		int result = 0;

		if (!node.isEmpty()) {
			result = this.height((BSTNode<T>) node.getLeft(), -1) - this.height((BSTNode<T>) node.getRight(), -1);
		}

		return result;
	}

	// AUXILIARY
	protected void rebalance(BSTNode<T> node) {

		int balance = this.calculateBalance(node);

		if (balance < -1) {

			int balanceLeft = this.calculateBalance((BSTNode<T>) node.getLeft());

			if (balanceLeft > 0) {

				this.leftRotation((BSTNode<T>) node.getLeft());

			}

			this.rightRotation(node);

		} else if (balance > 1) {

			int balanceRight = this.calculateBalance((BSTNode<T>) node.getRight());

			if (balanceRight < 0) {

				this.rightRotation((BSTNode<T>) node.getRight());

			}

			this.leftRotation(node);

		}
	}

	// AUXILIARY
	protected void rebalanceUp(BSTNode<T> node) {
		if (node != null) {
			rebalance(node);
			rebalanceUp((BSTNode<T>) node.getParent());
		}
	}
	
	protected void rightRotation(BSTNode<T> node) {
		if (node.equals(this.getRoot())) {

			this.root = Util.rightRotation(node);

		} else {

			BSTNode<T> aux = Util.rightRotation(node);

			if (aux.getData().compareTo(aux.getParent().getData()) > 0) {

				aux.getParent().setRight(aux);

			} else {

				aux.getParent().setLeft(aux);

			}
		}
	}

	protected void leftRotation(BSTNode<T> node) {
		if (node.equals(this.getRoot())) {

			this.root = Util.leftRotation(node);

		} else {

			BSTNode<T> aux = Util.leftRotation(node);

			if (aux.getData().compareTo(aux.getParent().getData()) < 0) {

				aux.getParent().setLeft(aux);

			} else {

				aux.getParent().setRight(aux);

			}
		}
	}

	public void clear() {
		// TODO Auto-generated method stub
		
	}
}
