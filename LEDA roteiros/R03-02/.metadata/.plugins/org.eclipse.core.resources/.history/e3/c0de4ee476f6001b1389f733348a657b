package sorting.linearSorting;

import java.util.Arrays;

import sorting.AbstractSorting;

/**
 * Classe que implementa a estratégia de Counting Sort vista em sala. Procure
 * evitar desperdicio de memoria alocando o array de contadores com o tamanho
 * sendo o máximo inteiro presente no array a ser ordenado.
 *
 * Voce pode assumir que o maior inteiro armazenado não chega a 100.
 *
 */
public class CountingSort extends AbstractSorting<Integer> {

	@Override
	public void sort(Integer[] array, int leftIndex, int rightIndex) {
		if (leftIndex < rightIndex) {

			int maior = array[leftIndex];

			for (int i = leftIndex+1; i < rightIndex; i++) {
				if (array[i] > maior) {
					maior = array[i];
				}

			}

			int[] arrayContador = new int[maior + 1];

			for (int i = leftIndex; i <= rightIndex; i++) {
				arrayContador[array[i]]++;
			}

			for (int i = 1; i < arrayContador.length; i++) {
				arrayContador[i] = arrayContador[i] + arrayContador[i - 1];
			}

			Integer[] arrayAux = new Integer[(rightIndex - leftIndex)+1];

			for (int i = rightIndex; i >= leftIndex; i--) {
				arrayAux[arrayContador[array[i]] - 1] = array[i];
				arrayContador[array[i]] -= 1;
			}

			for (int i = leftIndex; i < rightIndex; i++) {
				array[i] = arrayAux[i-leftIndex];
			}

			System.out.println(Arrays.toString(array));
			System.out.println(arrayAux.length);
		}
	}

	public static void main(String[] args) {
		Integer[] c = new Integer[] { 30, 28, 7, 29, 11, 26, 4, 22, 23, 31 };
		CountingSort b = new CountingSort();
		b.sort(c);
	}

}
