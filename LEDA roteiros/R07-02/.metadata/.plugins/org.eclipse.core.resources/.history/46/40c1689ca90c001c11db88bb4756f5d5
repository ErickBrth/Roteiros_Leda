package adt.hashtable.open;

import adt.hashtable.hashfunction.HashFunctionClosedAddressMethod;
import adt.hashtable.hashfunction.HashFunctionLinearProbing;

public class HashtableOpenAddressLinearProbingImpl<T extends Storable> extends AbstractHashtableOpenAddress<T> {

	public HashtableOpenAddressLinearProbingImpl(int size, HashFunctionClosedAddressMethod method) {
		super(size);
		hashFunction = new HashFunctionLinearProbing<T>(size, method);
		this.initiateInternalTable(size);
	}

	@Override
	public void insert(T element) {
		if (element != null) {
			if (search(element) == null) {

				int i = 0;
				while (i < this.table.length) {

					int hash = ((HashFunctionLinearProbing<T>) hashFunction).hash(element, i);

					if (this.table[hash] == null || this.table[hash].equals(deletedElement)
							|| this.table[hash].equals(element)) {
						this.table[hash] = element;
						this.elements++;
						break;
					}
				}

				i++;
			}
			if (isFull()) {
				throw new HashtableOverflowException();
			} else {
				this.COLLISIONS += 1;
			}
		}
	}

	@Override
	public void remove(T element) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public T search(T element) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public int indexOf(T element) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

}
